import { CognitiveItem, SemanticAtom, UUID, TruthValue, AttentionValue, DerivationStamp } from '@cognitive-arch/types';
import { v4 as uuidv4 } from 'uuid';

// --- Developer-Facing Artifact Types ---

/**
 * Represents a high-level functionality requirement.
 * Stored as a GOAL to be achieved by the development process.
 */
export type FunctionalityRequirement = CognitiveItem & {
    type: 'GOAL';
    meta: {
        type: 'dev/requirement';
        description: string;
        acceptanceCriteria: string[];
    };
};

/**
 * Represents a single test failure event.
 * Stored as a BELIEF with low confidence, indicating a problem to be investigated.
 */
export type TestFailure = CognitiveItem & {
    type: 'BELIEF';
    truth: {
        frequency: 1.0; // It definitely happened once.
        confidence: 0.3; // But the reason is uncertain.
    };
    meta: {
        type: 'dev/test-failure';
        testName: string;
        errorMessage: string;
        stackTrace?: string;
    };
};

/**
 * Represents the code coverage statistics for a file.
 * Stored as a BELIEF.
 */
export type CodeCoverageReport = CognitiveItem & {
    type: 'BELIEF';
    truth: {
        frequency: 1.0;
        confidence: 1.0; // Coverage data is a direct observation.
    };
    meta: {
        type: 'dev/coverage-report';
        filePath: string;
        statementCoverage: number; // e.g., 85.5
        branchCoverage: number;
        functionCoverage: number;
    };
};

// --- Helper Functions to Create These Artifacts ---

/**
 * Creates a SemanticAtom for a given piece of content, ensuring a verifiable ID.
 * In a real implementation, the ID would be a hash of the content. Here we use UUIDs.
 */
function createAtom(content: any, meta: Record<string, any>): SemanticAtom {
    return {
        id: uuidv4() as UUID,
        content: content,
        embedding: [], // Embeddings would be generated by a model.
        meta: meta,
    };
}

export function createRequirement(description: string, acceptanceCriteria: string[]): FunctionalityRequirement {
    const atom = createAtom(
        { description },
        {
            type: 'dev/requirement',
            description,
            acceptanceCriteria,
            timestamp: new Date().toISOString(),
        }
    );

    return {
        id: uuidv4() as UUID,
        atom_id: atom.id,
        type: 'GOAL',
        attention: { priority: 0.8, durability: 0.9 },
        stamp: {
            timestamp: Date.now(),
            parent_ids: [],
            schema_id: 'manual/requirement-creation' as UUID,
        },
        goal_status: 'active',
        meta: atom.meta,
    } as FunctionalityRequirement;
}
